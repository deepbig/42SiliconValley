# 14) Launch a `wordpress` container as a backgourd task, just for fun.
#	The container should be named `lair`, its 80 port should be bound to the 8080 port of the virtual machine,
#	and it should be able to use the `spawning-pool` container as a database service.
#	You can try to access `lair` on your machine via a web browser, with the IP address of the virtual machine as a URL.
#	Congratuations, you just deployed a functional Wordpress website in two commands!

# hostPort:containerPort
# containerPort is the port in the container, one which your containerzied app should listen on.
# hostPort is the port which will be visible on the Mesos Agent where container is running.

#Communication across links
#	Links allow containers to discover each other and securely transfer information about one container to another container. When you set up a link, you create a conduit between a source container and a recipient container. The recipient can then access select data about the source. To create a link, you use the --link flag.
# https://docs.docker.com/network/links/

docker run -d --name lair -p 8080:80 --link spawning-pool:mysql wordpress

# If you want to avoid future problem with legacy flag, `docker network create` is an alternative.
# $ docker network create my-net
# docker create --name my-nginx \
# --network my-net \
# --publish 8080:80 \
# nginx:latest

# https://docs.docker.com/network/bridge/
